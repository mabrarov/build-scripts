--- qtbase/mkspecs/common/msvc-desktop.conf	2020-10-27 11:02:11 +0300
+++ qtbase/mkspecs/common/msvc-desktop.conf	2021-02-24 22:25:32 +0300
@@ -40,7 +40,7 @@
 QMAKE_CFLAGS_WARN_OFF   = -W0
 QMAKE_CFLAGS_RELEASE    = $$QMAKE_CFLAGS_OPTIMIZE -MD
 QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += $$QMAKE_CFLAGS_OPTIMIZE -Zi -MD
-QMAKE_CFLAGS_DEBUG      = -Zi -MDd
+QMAKE_CFLAGS_DEBUG      = -MDd
 QMAKE_CFLAGS_YACC       =
 QMAKE_CFLAGS_LTCG       = -GL

@@ -87,7 +87,7 @@
 QMAKE_LFLAGS            = /NOLOGO /DYNAMICBASE /NXCOMPAT
 QMAKE_LFLAGS_RELEASE    = /OPT:REF /INCREMENTAL:NO
 QMAKE_LFLAGS_RELEASE_WITH_DEBUGINFO = /DEBUG /OPT:REF /INCREMENTAL:NO
-QMAKE_LFLAGS_DEBUG      = /DEBUG
+QMAKE_LFLAGS_DEBUG      = /DEBUG:NONE
 QMAKE_LFLAGS_CONSOLE    = /SUBSYSTEM:CONSOLE
 QMAKE_LFLAGS_WINDOWS    = /SUBSYSTEM:WINDOWS
 QMAKE_LFLAGS_EXE        = \"/MANIFESTDEPENDENCY:type=\'win32\' name=\'Microsoft.Windows.Common-Controls\' version=\'6.0.0.0\' publicKeyToken=\'6595b64144ccf1df\' language=\'*\' processorArchitecture=\'*\'\"

--- qtwebengine/src/3rdparty/chromium/third_party/angle/src/common/mathutil.cpp	2020-10-27 11:02:11 +0300
+++ qtwebengine/src/3rdparty/chromium/third_party/angle/src/common/mathutil.cpp	2021-02-24 22:28:48 +0300
@@ -72,11 +72,11 @@
     const RGB9E5Data *inputData = reinterpret_cast<const RGB9E5Data *>(&input);

     *red =
-        inputData->R * pow(2.0f, (int)inputData->E - g_sharedexp_bias - g_sharedexp_mantissabits);
+        inputData->R * (float)pow(2.0f, (int)inputData->E - g_sharedexp_bias - g_sharedexp_mantissabits);
     *green =
-        inputData->G * pow(2.0f, (int)inputData->E - g_sharedexp_bias - g_sharedexp_mantissabits);
+        inputData->G * (float)pow(2.0f, (int)inputData->E - g_sharedexp_bias - g_sharedexp_mantissabits);
     *blue =
-        inputData->B * pow(2.0f, (int)inputData->E - g_sharedexp_bias - g_sharedexp_mantissabits);
+        inputData->B * (float)pow(2.0f, (int)inputData->E - g_sharedexp_bias - g_sharedexp_mantissabits);
 }

 }  // namespace gl

--- qtwebengine/src/3rdparty/chromium/third_party/blink/renderer/platform/graphics/lab_color_space.h	2020-10-27 11:02:11 +0300
+++ qtwebengine/src/3rdparty/chromium/third_party/blink/renderer/platform/graphics/lab_color_space.h	2021-02-24 22:28:48 +0300
@@ -130,7 +130,7 @@
   // https://en.wikipedia.org/wiki/CIELAB_color_space#Forward_transformation.
   FloatPoint3D toXYZ(const FloatPoint3D& lab) const {
     auto invf = [](float x) {
-      return x > kSigma ? pow(x, 3) : 3 * kSigma2 * (x - 4.0f / 29.0f);
+      return x > kSigma ? (float)pow(x, 3) : 3 * kSigma2 * (x - 4.0f / 29.0f);
     };

     FloatPoint3D v = {clamp(lab.X(), 0.0f, 100.0f),

--- qtwebengine/src/3rdparty/chromium/third_party/perfetto/src/trace_processor/timestamped_trace_piece.h	2020-10-27 11:02:11 +0300
+++ qtwebengine/src/3rdparty/chromium/third_party/perfetto/src/trace_processor/timestamped_trace_piece.h	2021-02-24 22:28:48 +0300
@@ -198,6 +198,18 @@
     return *this;
   }

+#if PERFETTO_BUILDFLAG(PERFETTO_COMPILER_MSVC)
+  TimestampedTracePiece& operator=(TimestampedTracePiece&& ttp) const {
+    if (this != &ttp) {
+      // First invoke the destructor and then invoke the move constructor
+      // inline via placement-new to implement move-assignment.
+      this->~TimestampedTracePiece();
+      new (const_cast<TimestampedTracePiece*>(this)) TimestampedTracePiece(std::move(ttp));
+    }
+    return const_cast<TimestampedTracePiece&>(*this);
+  }
+#endif  // PERFETTO_BUILDFLAG(PERFETTO_COMPILER_MSVC)
+
   ~TimestampedTracePiece() {
     switch (type) {
       case Type::kInvalid:
